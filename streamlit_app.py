# app.py

import streamlit as st
import json
import pandas as pd
import os
#from sklearn.metrics import classification_report, confusion_matrix

LABELS = [
    {"label": "Bloqueio", "value": 1, "subpasta": "bloqueio", "tpOficio": "03"},
    {"label": "N√£o-Bloqueio", "value": 0, "subpasta": "nao_bloqueio", "tpOficio": "00"}
]
SUBPASTA_TO_LABEL = {lbl['subpasta']: lbl for lbl in LABELS}
FUNCIONALIDADES = ["CLASSIFICAR", "TESTAR MODELO", "RELAT√ìRIOS"]

st.set_page_config(page_title="Classificador de Of√≠cios - V4")


# -------------- ABA DE NAVEGA√á√ÉO ---------------
aba = st.sidebar.radio(
    "QUAL FUNCIONALIDADE DESEJA EXECUTAR?",
    FUNCIONALIDADES
)

# -------------- CLASSIFICA√á√ÉO DI√ÅRIA ---------------
if aba == FUNCIONALIDADES[0]:
    st.markdown("<h1 style='text-align: center;'>Descubra qual tipo o seu Of√≠cio pertence:</h1>", unsafe_allow_html=True)
   

# -------------- TESTE DO MODELO (com upload de arquivos rotulados) ---------------
if aba == FUNCIONALIDADES[1]:
    st.markdown("<h1 style='text-align: center;'>Traga novos dados para testar o desempenho do modelo!</h1>", unsafe_allow_html=True)

if aba == FUNCIONALIDADES[2]:
# Carrega experimentos j√° ajustados
    with open("relatorio_experimentos.json", "r", encoding="utf-8") as f:
        data = json.load(f)

        # CONTEXTO RESUMIDO
        contexto = """
        O processo de atendimento a ordens judiciais de bloqueio financeiro √© operacionalizado pela JD, que atua na estrutura√ß√£o e an√°lise de of√≠cios encaminhados por diversos tribunais. O desafio envolve lidar com documentos em PDF altamente heterog√™neos, com grande variedade de formatos, vocabul√°rio jur√≠dico complexo e estrutura textual n√£o padronizada. Atualmente, todo o fluxo √© majoritariamente manual, com participa√ß√£o intensa de advogados especializados. A empresa buscou solu√ß√µes baseadas em IA para aumentar a produtividade e reduzir o tempo de processamento, testando modelos capazes de identificar e classificar automaticamente of√≠cios, em busca de um desempenho que permitisse automatiza√ß√£o confi√°vel do processo.
        """

        st.title("Relat√≥rio Executivo ‚Äî Plataforma de IA JD para Classifica√ß√£o de Of√≠cios Jur√≠dicos")
        st.markdown(f"##### Contexto do Problema")
        st.markdown(contexto)

        # SUM√ÅRIO
        st.markdown("### Sum√°rio")
        st.markdown("""
        1. Estrat√©gias e Solu√ß√µes Testadas
        2. Pipeline de Automa√ß√£o
        3. Resultados: N√∫meros e Diagn√≥stico
        """)

        st.header("1. Estrat√©gias e Solu√ß√µes Testadas")
        st.markdown("A seguir, apresentamos os m√©todos avaliados para solucionar o desafio da JD. Cada solu√ß√£o traz sua abordagem, principais resultados e orienta√ß√µes para evolu√ß√£o do projeto:")

        # Agrupando por grupo/modelo
        grupos = {}
        for exp in data['experimentos']:
            if exp['grupo'] not in grupos:
                grupos[exp['grupo']] = []
            grupos[exp['grupo']].append(exp)

        for grupo, exps in grupos.items():
            with st.expander(f"üß© {grupo}", expanded=True):
                for idx, exp in enumerate(exps):
                    with st.container():
                        st.markdown(f"##### {exp['nome']}")
                        st.markdown(f"*<b>Descri√ß√£o:</b> {exp['observacoes']}*", unsafe_allow_html=True)

                        # Pipeline visual
                        with st.expander("üîé Pipeline da solu√ß√£o", expanded=False):
                            st.markdown(" > ".join([f"**{step}**" for step in exp['pipeline']]), unsafe_allow_html=True)
                            if exp['hiperparametros']:
                                st.markdown(f"**Hiperpar√¢metros:** `{exp['hiperparametros']}`")

                        # M√©tricas em tabela
                        metricas = exp['resultados']
                        tabela = pd.DataFrame([{
                            "Sensibilidade": metricas['sensibilidade'],
                            "Especificidade": metricas['especificidade'],
                            "Precis√£o": metricas['precisao'],
                            "Acur√°cia": metricas['acuracia'],
                            "F1 Score": metricas['f1score']
                        }])
                        st.dataframe(tabela.style.format("{:.2%}"), use_container_width=True)

                        # Orienta√ß√µes
                        st.markdown("**Orienta√ß√µes por m√©trica:**")
                        for metrica, orientacoes in exp['orientacoes'].items():
                            st.markdown(f"**{metrica.capitalize()}:**")
                            st.markdown("\n".join([f"- {o}" for o in orientacoes]))
                        st.markdown(f"**Impacto no neg√≥cio:** {exp['impacto']}")

                        st.markdown("---")

        st.header("2. Pipeline de Automa√ß√£o")
        st.markdown("""
        O pipeline foi estruturado desde a extra√ß√£o do texto at√© a classifica√ß√£o final, abrangendo:
        - Entrada: PDF original do tribunal.
        - Extra√ß√£o e limpeza do texto (OCR, normaliza√ß√£o, stopwords, tokeniza√ß√£o, embeddings, compacta√ß√£o).
        - Extra√ß√£o de features: palavras, posi√ß√µes, palavras-chave.
        - Constru√ß√£o do dataset: treino/teste balanceado.
        - Treinamento do modelo (Random Forest, SVM, LogisticRegression, MLP, XGBoost).
        - Valida√ß√£o do modelo: sensibilidade, especificidade, precis√£o, acur√°cia e F1Score.
        """)

        st.header("3. Resultados: N√∫meros e Diagn√≥stico")
        tabela_resultados = []
        for exp in data['experimentos']:
            tabela_resultados.append({
                "Modelo": exp['nome'],
                "Acur√°cia (%)": f"{exp['resultados']['acuracia']*100:.0f}",
                "Precis√£o (%)": f"{exp['resultados']['precisao']*100:.0f}",
                "F1-score (%)": f"{exp['resultados']['f1score']*100:.0f}"
            })

        st.table(pd.DataFrame(tabela_resultados))

        # Diagn√≥stico final (visual: generaliza√ß√£o vs memoriza√ß√£o)
        st.markdown("#### Diagn√≥stico: Generaliza√ß√£o x Memoriza√ß√£o")
        st.markdown("""
        O modelo apresenta **alto desempenho na base conhecida**, mas sua habilidade de generalizar para novas massas ainda √© limitada. 
        O maior risco reside na especializa√ß√£o excessiva nos padr√µes da base original ‚Äî √© fundamental evoluir o modelo para cen√°rios mais diversos e robustos.

        **Diagn√≥stico visual:**  
        `Generaliza√ß√£o` &nbsp;&nbsp;&nbsp; <span style='color:#4caf50;font-weight:bold;'>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> &nbsp;&nbsp;&nbsp; `Memoriza√ß√£o`

        """, unsafe_allow_html=True)